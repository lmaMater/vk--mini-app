{"version":3,"sources":["../../../src/components/CustomSelect/CustomSelect.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, debounce } from '@vkontakte/vkjs';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { useDOM } from '../../lib/dom';\nimport type { Placement } from '../../lib/floating';\nimport { defaultFilterFn, type FilterFn } from '../../lib/select';\nimport { useIsomorphicLayoutEffect } from '../../lib/useIsomorphicLayoutEffect';\nimport { warnOnce } from '../../lib/warnOnce';\nimport type { TrackerOptionsProps } from '../CustomScrollView/useTrackerVisibility';\nimport {\n  CustomSelectDropdown,\n  type CustomSelectDropdownProps,\n} from '../CustomSelectDropdown/CustomSelectDropdown';\nimport { DropdownIcon } from '../DropdownIcon/DropdownIcon';\nimport type { FormFieldProps } from '../FormField/FormField';\nimport type { NativeSelectProps } from '../NativeSelect/NativeSelect';\nimport type { SelectType } from '../Select/Select';\nimport { Footnote } from '../Typography/Footnote/Footnote';\nimport {\n  CustomSelectClearButton,\n  type CustomSelectClearButtonProps,\n} from './CustomSelectClearButton';\nimport { CustomSelectInput, type CustomSelectInputProps } from './CustomSelectInput';\nimport {\n  calculateInputValueFromOptions,\n  defaultRenderOptionFn,\n  findIndexAfter,\n  findIndexBefore,\n  findSelectedIndex,\n} from './helpers';\nimport type { CustomSelectOptionInterface, CustomSelectRenderOption } from './types';\nimport styles from './CustomSelect.module.css';\n\nconst sizeYClassNames = {\n  none: styles['CustomSelect--sizeY-none'],\n  compact: styles['CustomSelect--sizeY-compact'],\n};\n\nconst warn = warnOnce('CustomSelect');\n\nconst checkOptionsValueType = <T extends CustomSelectOptionInterface>(options: T[]) => {\n  if (new Set(options.map((item) => typeof item.value)).size > 1) {\n    warn(\n      'Некоторые значения ваших опций имеют разные типы. onChange всегда возвращает строковый тип.',\n      'error',\n    );\n  }\n};\n\nconst handleOptionDown: MouseEventHandler = (e: React.MouseEvent<HTMLElement>) => {\n  e.preventDefault();\n};\n\nconst filter = <T extends CustomSelectOptionInterface>(\n  options: SelectProps<T>['options'],\n  inputValue: string,\n  filterFn: SelectProps<T>['filterFn'],\n) => {\n  return typeof filterFn === 'function'\n    ? options.filter((option) => filterFn(inputValue, option))\n    : options;\n};\n\nexport type { CustomSelectClearButtonProps, CustomSelectOptionInterface, CustomSelectRenderOption };\n\nexport interface SelectProps<\n  OptionInterfaceT extends CustomSelectOptionInterface = CustomSelectOptionInterface,\n> extends NativeSelectProps,\n    Omit<FormFieldProps, 'maxHeight'>,\n    TrackerOptionsProps,\n    Pick<\n      CustomSelectDropdownProps,\n      'overscrollBehavior' | 'autoHideScrollbar' | 'autoHideScrollbarDelay'\n    >,\n    Pick<CustomSelectInputProps, 'minLength' | 'maxLength' | 'pattern' | 'readOnly'> {\n  /**\n   * ref на внутрений компонент input\n   */\n  getSelectInputRef?: React.Ref<HTMLInputElement>;\n  /**\n   * Если `true`, то при клике на `CustomSelect` в нём появится текстовое поле для поиска по `options`. По умолчанию поиск\n   * производится по `option.label`.\n   */\n  searchable?: boolean;\n  /**\n   * Текст, который будет отображен, если приходит пустой `options`.\n   */\n  emptyText?: string;\n  /**\n   * Событие изменения текстового поля\n   */\n  onInputChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  options: OptionInterfaceT[];\n  /**\n   * Функция для кастомной фильтрации. По умолчанию поиск производится по `option.label`.\n   */\n  filterFn?: false | FilterFn<OptionInterfaceT>;\n  popupDirection?: 'top' | 'bottom';\n  /**\n   * Рендер-проп для кастомного рендера опции.\n   * В объекте аргумента приходят [свойства опции](https://vkcom.github.io/VKUI/#/CustomSelectOption?id=props)\n   *\n   * > ⚠️  Важно: cвойство опции `disabled` должно выставляться только через проп `options`.\n   * > Запрещается выставлять `disabled` проп опциям в обход `options`, иначе `CustomSelect` не будет знать об актуальном состоянии\n   * опции.\n   */\n  renderOption?: (props: CustomSelectRenderOption<OptionInterfaceT>) => React.ReactNode;\n  /**\n   * Рендер-проп для кастомного рендера содержимого дропдауна.\n   * В `defaultDropdownContent` содержится список опций в виде скроллящегося блока.\n   */\n  renderDropdown?: ({\n    defaultDropdownContent,\n  }: {\n    defaultDropdownContent: React.ReactNode;\n  }) => React.ReactNode;\n  /**\n   * Если `true`, то в дропдауне вместо списка опций рисуется спиннер. При переданных `renderDropdown` и `fetching: true`\n   * \"победит\" `renderDropdown`.\n   */\n  fetching?: boolean;\n  onClose?: VoidFunction;\n  onOpen?: VoidFunction;\n  /**\n   * Иконка раскрывающегося списка\n   */\n  icon?: React.ReactNode;\n  /**\n   * Кастомная кнопка для очистки значения.\n   * Должна принимать обязательное свойство `onClick`\n   */\n  ClearButton?: React.ComponentType<CustomSelectClearButtonProps>;\n  /**\n   * Если `true`, то справа будет отображаться кнопка для очистки значения\n   */\n  allowClearButton?: boolean;\n  /**\n   * (e2e) testId кнопки очистки\n   */\n  clearButtonTestId?: string;\n  /**\n   * Отступ от выпадающего списка\n   */\n  dropdownOffsetDistance?: number;\n  /**\n   * Ширина раскрывающегося списка зависит от контента\n   */\n  dropdownAutoWidth?: boolean;\n  forceDropdownPortal?: boolean;\n  selectType?: SelectType;\n  /**\n   * Отключает максимальную высоту по умолчанию\n   */\n  noMaxHeight?: boolean;\n  /**\n   * (e2e) testId элемента, внутри которого отображается текст выбранной опции `CustomSelect` или плейсхолдер.\n   */\n  labelTextTestId?: string;\n  nativeSelectTestId?: string;\n}\n\ntype MouseEventHandler = (event: React.MouseEvent<HTMLElement>) => void;\n\n/**\n * @see https://vkcom.github.io/VKUI/#/CustomSelect\n */\nexport function CustomSelect<OptionInterfaceT extends CustomSelectOptionInterface>(\n  props: SelectProps<OptionInterfaceT>,\n): React.ReactNode {\n  const [opened, setOpened] = React.useState(false);\n  const {\n    before,\n    name,\n    className,\n    getRef,\n    getRootRef,\n    popupDirection = 'bottom',\n    style,\n    onChange,\n    children,\n    'onInputChange': onInputChangeProp,\n    renderDropdown,\n    onOpen,\n    onClose,\n    fetching,\n    forceDropdownPortal,\n    selectType = 'default',\n    autoHideScrollbar,\n    autoHideScrollbarDelay,\n    searchable = false,\n    'renderOption': renderOptionProp = defaultRenderOptionFn,\n    'options': optionsProp,\n    emptyText = 'Ничего не найдено',\n    filterFn = defaultFilterFn,\n    'icon': iconProp,\n    ClearButton = CustomSelectClearButton,\n    allowClearButton = false,\n    dropdownOffsetDistance = 0,\n    dropdownAutoWidth = false,\n    noMaxHeight = false,\n    'aria-labelledby': ariaLabelledBy,\n    clearButtonTestId,\n    nativeSelectTestId,\n    defaultValue,\n    required,\n    getSelectInputRef,\n    overscrollBehavior,\n    ...restProps\n  } = props;\n\n  if (process.env.NODE_ENV === 'development') {\n    checkOptionsValueType(optionsProp);\n  }\n\n  const { sizeY = 'none' } = useAdaptivity();\n\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const handleRootRef = useExternRef(containerRef, getRootRef);\n  const scrollBoxRef = React.useRef<HTMLDivElement | null>(null);\n  const selectElRef = useExternRef(getRef);\n  const optionsWrapperRef = React.useRef<HTMLDivElement>(null);\n  const selectInputRef = useExternRef(getSelectInputRef);\n\n  const [focusedOptionIndex, setFocusedOptionIndex] = React.useState<number | undefined>(-1);\n  const [isControlledOutside, setIsControlledOutside] = React.useState(props.value !== undefined);\n  const [nativeSelectValue, setNativeSelectValue] = React.useState(\n    () => props.value ?? defaultValue ?? (allowClearButton ? '' : undefined),\n  );\n\n  const [inputValue, setInputValue] = React.useState(() =>\n    calculateInputValueFromOptions(optionsProp, nativeSelectValue),\n  );\n\n  const [popperPlacement, setPopperPlacement] = React.useState<Placement>(popupDirection);\n  const [options, setOptions] = React.useState(optionsProp);\n  const [selectedOptionIndex, setSelectedOptionIndex] = React.useState<number | undefined>(\n    findSelectedIndex(optionsProp, props.value ?? defaultValue, allowClearButton),\n  );\n\n  React.useEffect(() => {\n    setIsControlledOutside(props.value !== undefined);\n    setNativeSelectValue((nativeSelectValue) => props.value ?? nativeSelectValue);\n  }, [props.value]);\n\n  useIsomorphicLayoutEffect(() => {\n    if (\n      options.some(({ value }) => nativeSelectValue === value) ||\n      (allowClearButton && nativeSelectValue === '')\n    ) {\n      const event = new Event('change', { bubbles: true });\n\n      selectElRef.current?.dispatchEvent(event);\n    }\n  }, [nativeSelectValue]);\n\n  const selected = React.useMemo(() => {\n    if (!options.length) {\n      return null;\n    }\n\n    return selectedOptionIndex !== undefined ? options[selectedOptionIndex] : undefined;\n  }, [options, selectedOptionIndex]);\n\n  const openedClassNames = React.useMemo(\n    () =>\n      (opened &&\n        dropdownOffsetDistance === 0 &&\n        (popperPlacement.includes('top')\n          ? styles['CustomSelect--pop-up']\n          : styles['CustomSelect--pop-down'])) ||\n      undefined,\n    [dropdownOffsetDistance, opened, popperPlacement],\n  );\n\n  const scrollToElement = React.useCallback((index: number, center = false) => {\n    const dropdown = scrollBoxRef.current;\n    const optionsWrapper = optionsWrapperRef.current;\n    const item =\n      dropdown && optionsWrapper ? (optionsWrapper.children[index] as HTMLElement) : null;\n\n    if (!item || !dropdown) {\n      return;\n    }\n\n    const dropdownHeight = dropdown.offsetHeight;\n    const scrollTop = dropdown.scrollTop;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  }, []);\n\n  const focusOptionByIndex = React.useCallback(\n    (index: number | undefined, scrollTo = true) => {\n      if (index === undefined || index < 0 || index > (options.length ?? 0) - 1) {\n        return;\n      }\n\n      const option = options[index];\n\n      if (option?.disabled) {\n        return;\n      }\n\n      if (scrollTo) {\n        scrollToElement(index);\n      }\n\n      // Это оптимизация, прежде всего, под `onMouseMove`\n      setFocusedOptionIndex((focusedOptionIndex) =>\n        focusedOptionIndex !== index ? index : focusedOptionIndex,\n      );\n    },\n    [options, scrollToElement],\n  );\n\n  const isValidIndex = React.useCallback(\n    (index: number) => {\n      return index >= 0 && index < (options.length ?? 0);\n    },\n    [options.length],\n  );\n\n  const setScrollBoxRef = React.useCallback(\n    (ref: HTMLDivElement | null) => {\n      scrollBoxRef.current = ref;\n\n      if (ref && selectedOptionIndex !== undefined && isValidIndex(selectedOptionIndex)) {\n        {\n          scrollToElement(selectedOptionIndex, true);\n        }\n      }\n    },\n    [isValidIndex, scrollToElement, selectedOptionIndex],\n  );\n\n  const [keyboardInput, setKeyboardInput] = React.useState('');\n  const resetKeyboardInput = React.useCallback(() => {\n    setKeyboardInput('');\n  }, []);\n\n  const resetFocusedOption = React.useCallback(() => {\n    setFocusedOptionIndex(-1);\n  }, []);\n\n  const onKeyboardInput = React.useCallback(\n    (key: string) => {\n      if (!opened) {\n        setOpened(true);\n      }\n      resetFocusedOption();\n      const fullInput = keyboardInput + key;\n\n      setKeyboardInput(fullInput);\n    },\n    [keyboardInput, opened, resetFocusedOption],\n  );\n\n  /**\n   * Note: сбрасывать `options` через `setOptions(optionsProp)` не нужно.\n   *  Сброс происходит в одном из эффекте `updateOptionsAndSelectedOptionIndex()`.\n   */\n  const close = React.useCallback(() => {\n    resetKeyboardInput();\n\n    setOpened(false);\n    resetFocusedOption();\n    onClose?.();\n  }, [onClose, resetKeyboardInput, resetFocusedOption]);\n\n  const selectOption = React.useCallback(\n    (index: number) => {\n      const item = options[index];\n\n      close();\n      setNativeSelectValue(item?.value);\n\n      const shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync =\n        isControlledOutside &&\n        props.value !== nativeSelectValue &&\n        nativeSelectValue === item?.value;\n\n      if (shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync) {\n        const event = new Event('change', { bubbles: true });\n        selectElRef.current?.dispatchEvent(event);\n      }\n    },\n    [close, options, selectElRef, isControlledOutside, props.value, nativeSelectValue],\n  );\n\n  const selectFocused = React.useCallback(() => {\n    if (focusedOptionIndex === undefined || !isValidIndex(focusedOptionIndex)) {\n      return;\n    }\n\n    selectOption(focusedOptionIndex);\n  }, [focusedOptionIndex, isValidIndex, selectOption]);\n\n  const open = React.useCallback(() => {\n    setOpened(true);\n    setFocusedOptionIndex(selectedOptionIndex);\n\n    if (typeof onOpen === 'function') {\n      onOpen();\n    }\n  }, [onOpen, selectedOptionIndex]);\n\n  const onBlur = React.useCallback(() => {\n    close();\n    const event = new Event('focusout', { bubbles: true });\n    selectElRef.current?.dispatchEvent(event);\n\n    setInputValue(calculateInputValueFromOptions(optionsProp, nativeSelectValue));\n  }, [close, selectElRef, optionsProp, nativeSelectValue]);\n\n  const onFocus = React.useCallback(() => {\n    const event = new Event('focusin', { bubbles: true });\n    selectElRef.current?.dispatchEvent(event);\n    selectInputRef.current?.select();\n  }, [selectElRef, selectInputRef]);\n\n  const onClick = React.useCallback(() => {\n    if (opened) {\n      close();\n    } else {\n      open();\n    }\n  }, [close, open, opened]);\n\n  const handleKeyUp = React.useMemo(() => debounce(resetKeyboardInput, 1000), [resetKeyboardInput]);\n\n  const focusOption = React.useCallback(\n    (type: 'next' | 'prev') => {\n      let index = focusedOptionIndex;\n\n      if (type === 'next') {\n        const nextIndex = findIndexAfter(options, index);\n        index = nextIndex === -1 ? findIndexAfter(options) : nextIndex; // Следующий за index или первый валидный до index\n      } else if (type === 'prev') {\n        const beforeIndex = findIndexBefore(options, index);\n        index = beforeIndex === -1 ? findIndexBefore(options) : beforeIndex; // Предшествующий index или последний валидный после index\n      }\n\n      focusOptionByIndex(index);\n    },\n    [focusOptionByIndex, focusedOptionIndex, options],\n  );\n\n  React.useEffect(\n    function filterOptions() {\n      const options =\n        searchable && inputValue !== undefined\n          ? filter(optionsProp, inputValue, filterFn)\n          : optionsProp;\n\n      setOptions(options);\n    },\n    [filterFn, inputValue, optionsProp, searchable],\n  );\n\n  const selectValue = props.value ?? nativeSelectValue ?? defaultValue;\n  React.useEffect(\n    function updateSelectedOptionIndexOnValueChange() {\n      setSelectedOptionIndex(findSelectedIndex(options, selectValue, allowClearButton));\n    },\n    [selectValue, allowClearButton, options],\n  );\n\n  const prevSelectValueRef = React.useRef(selectValue);\n  React.useEffect(\n    function updateInputValueOnSelectValueChange() {\n      if (prevSelectValueRef.current === selectValue) {\n        return;\n      }\n      setInputValue(calculateInputValueFromOptions(optionsProp, selectValue));\n    },\n    [selectValue, optionsProp],\n  );\n  React.useEffect(\n    function updatePrevSelectValue() {\n      prevSelectValueRef.current = selectValue;\n    },\n    [selectValue],\n  );\n\n  const onNativeSelectChange: React.ChangeEventHandler<HTMLSelectElement> = (e) => {\n    const newSelectedOptionIndex = findSelectedIndex(\n      options,\n      e.currentTarget.value,\n      allowClearButton,\n    );\n\n    if (selectedOptionIndex !== newSelectedOptionIndex) {\n      if (!isControlledOutside) {\n        setSelectedOptionIndex(newSelectedOptionIndex);\n      }\n      onChange?.(e);\n    }\n  };\n\n  const onInputChange: React.ChangeEventHandler<HTMLInputElement> = React.useCallback(\n    (e) => {\n      onInputChangeProp && onInputChangeProp(e);\n\n      const options = filter(optionsProp, e.target.value, filterFn);\n      setOptions(options);\n      setSelectedOptionIndex(findSelectedIndex(options, nativeSelectValue, allowClearButton));\n\n      setInputValue(e.target.value);\n    },\n    [filterFn, nativeSelectValue, onInputChangeProp, optionsProp, allowClearButton],\n  );\n\n  const areOptionsShown = React.useCallback(() => {\n    return scrollBoxRef.current !== null;\n  }, []);\n\n  const handleKeyDownSelect = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key.length === 1 && event.key !== ' ') {\n        onKeyboardInput(event.key);\n        return;\n      }\n\n      ['ArrowUp', 'ArrowDown', 'Escape', 'Enter'].includes(event.key) &&\n        areOptionsShown() &&\n        event.preventDefault();\n\n      switch (event.key) {\n        case 'ArrowUp':\n          if (opened) {\n            areOptionsShown() && focusOption('prev');\n          } else {\n            open();\n          }\n          break;\n        case 'ArrowDown':\n          if (opened) {\n            areOptionsShown() && focusOption('next');\n          } else {\n            open();\n          }\n          break;\n        case 'Escape':\n          close();\n          break;\n        case 'Backspace':\n        case 'Delete': {\n          if (!opened) {\n            setOpened(true);\n          }\n          resetFocusedOption();\n\n          break;\n        }\n        case 'Enter':\n        case 'Spacebar':\n        case ' ':\n          if (opened) {\n            areOptionsShown() && selectFocused();\n          } else {\n            open();\n          }\n          break;\n      }\n    },\n    [\n      areOptionsShown,\n      close,\n      focusOption,\n      onKeyboardInput,\n      open,\n      opened,\n      selectFocused,\n      resetFocusedOption,\n    ],\n  );\n\n  const handleOptionClick = React.useCallback(\n    (e: React.MouseEvent<HTMLElement>) => {\n      const index = Array.prototype.indexOf.call(\n        e.currentTarget.parentNode?.children,\n        e.currentTarget,\n      );\n      const option = options[index];\n\n      if (option && !option.disabled) {\n        selectOption(index);\n      }\n    },\n    [options, selectOption],\n  );\n\n  const prevMousePositionRef = React.useRef<{\n    x: React.MouseEvent['clientX'];\n    y: React.MouseEvent['clientY'];\n  }>({ x: 0, y: 0 });\n  const focusOptionOnMouseMove = React.useCallback(\n    (e: React.MouseEvent<HTMLElement>, index: number) => {\n      const isMouseChangedPosition =\n        Math.abs(prevMousePositionRef.current.x - e.clientX) >= 1 ||\n        Math.abs(prevMousePositionRef.current.y - e.clientY) >= 1;\n\n      if (isMouseChangedPosition) {\n        focusOptionByIndex(index, false);\n      }\n\n      prevMousePositionRef.current = { x: e.clientX, y: e.clientY };\n    },\n    [focusOptionByIndex],\n  );\n\n  const popupAriaId = React.useId();\n  const renderOption = React.useCallback(\n    (option: OptionInterfaceT, index: number) => {\n      const hovered = index === focusedOptionIndex;\n      const selected = index === selectedOptionIndex;\n\n      return (\n        <React.Fragment key={`${typeof option.value}-${option.value}`}>\n          {renderOptionProp({\n            option,\n            hovered,\n            children: option.label,\n            selected,\n            disabled: option.disabled,\n            onClick: handleOptionClick,\n            onMouseDown: handleOptionDown,\n            // Используем `onMouseMove` вместо `onMouseEnter/onMouseOver`.\n            // Потому что если при навигации с клавиатуры курсор наведён на\n            // список, то при первом автоматическом скролле списка вызывается событие MouseOver/MouseEnter\n            // обработчик которого фокусирует опцию под курсором, хотя при навигация с клавиатуры пользователь мог уйти дальше по списку, это путает.\n            // Причём координаты события меняются на пару пикселей по сравнению с прошлым вызовом,\n            // а значит нельзя на них опираться, чтобы запретить обработку такого события.\n            // C mousemove такой проблемы нет, что позволяет реализовать поведение при наведении с клавиатуры и при наведении мышью идентично `<select>`.\n            onMouseMove: (e) => focusOptionOnMouseMove(e, index),\n            id: `${popupAriaId}-${option.value}`,\n          })}\n        </React.Fragment>\n      );\n    },\n    [\n      focusedOptionIndex,\n      handleOptionClick,\n      focusOptionOnMouseMove,\n      renderOptionProp,\n      selectedOptionIndex,\n      popupAriaId,\n    ],\n  );\n\n  const resolvedContent = React.useMemo(() => {\n    const defaultDropdownContent =\n      options.length > 0 ? (\n        <div ref={optionsWrapperRef}>{options.map(renderOption)}</div>\n      ) : (\n        <Footnote className={styles['CustomSelect__empty']}>{emptyText}</Footnote>\n      );\n\n    if (typeof renderDropdown === 'function') {\n      return renderDropdown({ defaultDropdownContent });\n    } else {\n      return defaultDropdownContent;\n    }\n  }, [emptyText, options, renderDropdown, renderOption]);\n\n  const focusOnInputTimerRef = React.useRef<ReturnType<typeof setTimeout>>();\n  const focusOnInput = React.useCallback(() => {\n    clearTimeout(focusOnInputTimerRef.current);\n\n    focusOnInputTimerRef.current = setTimeout(() => {\n      selectInputRef.current && selectInputRef.current.focus();\n    }, 0);\n  }, [selectInputRef]);\n  useIsomorphicLayoutEffect(function clearFocusOnInputTimer() {\n    return () => {\n      clearTimeout(focusOnInputTimerRef.current);\n    };\n  }, []);\n\n  const controlledValueSet = isControlledOutside && props.value !== '';\n  const uncontrolledValueSet = !isControlledOutside && nativeSelectValue !== '';\n  const clearButtonShown =\n    allowClearButton && !opened && (controlledValueSet || uncontrolledValueSet);\n\n  const clearButton = React.useMemo(() => {\n    if (!clearButtonShown) {\n      return null;\n    }\n\n    return (\n      <ClearButton\n        className={iconProp === undefined ? styles['CustomSelect--clear-icon'] : undefined}\n        onClick={function clearSelectState() {\n          setNativeSelectValue('');\n          setInputValue('');\n          focusOnInput();\n        }}\n        disabled={restProps.disabled}\n        data-testid={clearButtonTestId}\n      />\n    );\n  }, [\n    clearButtonShown,\n    ClearButton,\n    iconProp,\n    restProps.disabled,\n    clearButtonTestId,\n    focusOnInput,\n  ]);\n\n  const icon = React.useMemo(() => {\n    if (iconProp !== undefined) {\n      return iconProp;\n    }\n\n    return (\n      <DropdownIcon\n        className={clearButtonShown ? styles['CustomSelect__dropdown-icon'] : undefined}\n        opened={opened}\n      />\n    );\n  }, [clearButtonShown, iconProp, opened]);\n\n  const afterIcons = (icon || clearButtonShown) && (\n    <React.Fragment>\n      {clearButton}\n      {icon}\n    </React.Fragment>\n  );\n\n  const { document } = useDOM();\n  const passClickAndFocusToInputOnClick = React.useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      // Раньше внешней оберткой CustomSelect был <label>, что позволяло по клику в любую область CustomSelect,\n      // даже где нету интерактивного элемента, фокусировать <input> и передавать на него событие клика.\n      // Так как мы больше не оборачиваем CustomSelect в <label>, то для обертки CustomSelect мы симулируем работу <label>.\n      // передаем фокус и клик по <input>, если пользователь кликнул в зоне обертки.\n      // В <label> мы не больше не оборачиваем, потому что это заставляет скринридер\n      // дважды произносить текст выбранной опции при фокусе, если CustomSelect связан с внешним <label>.\n      // Воспроизводится в некоторых версиях Chrome, при навигации по странице с помощью стрелок.\n      // Договорились со специалистом по доступности убрать <label>-обёртки из Select и CustomSelect\n\n      if (!selectInputRef.current || !document) {\n        return;\n      }\n\n      const clickTargetIsNotAnInput = e.target !== selectInputRef.current;\n      if (clickTargetIsNotAnInput) {\n        selectInputRef.current.click();\n\n        const inputIsNotFocused = document.activeElement !== selectInputRef.current;\n        if (inputIsNotFocused) {\n          focusOnInput();\n        }\n      }\n    },\n    [document, focusOnInput, selectInputRef],\n  );\n\n  const preventInputBlurWhenClickInsideFocusedSelectArea = (\n    e: React.MouseEvent<HTMLDivElement>,\n  ) => {\n    // Так как инпут больше не оборачивается пустым лэйблом, то клик внутри обертки,\n    // но вне инпута (например по иконке дропдауна), будет убирать фокус с инпута.\n    // Чтобы в такой ситуации отключить blur инпута мы превентим mousedown событие обёртки\n    const isInputFocused = document && document.activeElement === selectInputRef.current;\n    const clickTarget = e.target as HTMLElement;\n    const inputClicked = selectInputRef.current?.contains(clickTarget);\n    if (isInputFocused && !inputClicked) {\n      e.preventDefault();\n    }\n  };\n\n  const ariaActiveDescendantOptionIndex: undefined | number =\n    focusedOptionIndex !== -1 ? focusedOptionIndex : undefined;\n  const ariaActiveDescendantId =\n    ariaActiveDescendantOptionIndex !== undefined\n      ? options[ariaActiveDescendantOptionIndex] && options[ariaActiveDescendantOptionIndex].value\n      : null;\n\n  const selectInputAriaProps: React.HTMLAttributes<HTMLElement> = {\n    'role': 'combobox',\n    'aria-controls': popupAriaId,\n    'aria-expanded': opened,\n    'aria-activedescendant':\n      ariaActiveDescendantId && opened ? `${popupAriaId}-${ariaActiveDescendantId}` : undefined,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-haspopup': 'listbox',\n    'aria-autocomplete': 'none',\n  };\n\n  return (\n    <div\n      className={classNames(\n        styles['CustomSelect'],\n        sizeY !== 'regular' && sizeYClassNames[sizeY],\n        className,\n      )}\n      style={style}\n      ref={handleRootRef}\n      onClick={passClickAndFocusToInputOnClick}\n      onMouseDown={preventInputBlurWhenClickInsideFocusedSelectArea}\n    >\n      <CustomSelectInput\n        autoComplete=\"off\"\n        autoCapitalize=\"none\"\n        autoCorrect=\"off\"\n        spellCheck=\"false\"\n        {...restProps}\n        {...selectInputAriaProps}\n        getRef={selectInputRef}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        className={openedClassNames}\n        searchable={searchable}\n        fetching={fetching}\n        value={inputValue}\n        onKeyUp={handleKeyUp}\n        onKeyDown={handleKeyDownSelect}\n        onChange={onInputChange}\n        onClick={onClick}\n        before={before}\n        after={afterIcons}\n        selectType={selectType}\n        selectedOptionLabel={selected?.label}\n      />\n      <select\n        ref={selectElRef}\n        name={name}\n        onChange={onNativeSelectChange}\n        onBlur={props.onBlur}\n        onFocus={props.onFocus}\n        onClick={props.onClick}\n        value={nativeSelectValue}\n        aria-hidden\n        className={styles['CustomSelect__control']}\n        data-testid={nativeSelectTestId}\n        required={required}\n      >\n        {allowClearButton && <option key=\"\" value=\"\" />}\n        {optionsProp.map((item) => (\n          <option key={`${item.value}`} value={item.value} />\n        ))}\n      </select>\n      {opened && (\n        <CustomSelectDropdown\n          targetRef={containerRef}\n          placement={popperPlacement}\n          scrollBoxRef={setScrollBoxRef}\n          onPlacementChange={setPopperPlacement}\n          onMouseLeave={resetFocusedOption}\n          fetching={fetching}\n          overscrollBehavior={overscrollBehavior}\n          offsetDistance={dropdownOffsetDistance}\n          autoWidth={dropdownAutoWidth}\n          forcePortal={forceDropdownPortal}\n          autoHideScrollbar={autoHideScrollbar}\n          autoHideScrollbarDelay={autoHideScrollbarDelay}\n          noMaxHeight={noMaxHeight}\n          role=\"listbox\"\n          id={popupAriaId}\n          aria-labelledby={ariaLabelledBy}\n          tabIndex={-1}\n        >\n          {resolvedContent}\n        </CustomSelectDropdown>\n      )}\n    </div>\n  );\n}\n"],"names":["React","classNames","debounce","useAdaptivity","useExternRef","useDOM","defaultFilterFn","useIsomorphicLayoutEffect","warnOnce","CustomSelectDropdown","DropdownIcon","Footnote","CustomSelectClearButton","CustomSelectInput","calculateInputValueFromOptions","defaultRenderOptionFn","findIndexAfter","findIndexBefore","findSelectedIndex","sizeYClassNames","none","compact","warn","checkOptionsValueType","options","Set","map","item","value","size","handleOptionDown","e","preventDefault","filter","inputValue","filterFn","option","CustomSelect","props","opened","setOpened","useState","before","name","className","getRef","getRootRef","popupDirection","style","onChange","children","onInputChangeProp","renderDropdown","onOpen","onClose","fetching","forceDropdownPortal","selectType","autoHideScrollbar","autoHideScrollbarDelay","searchable","renderOptionProp","optionsProp","emptyText","iconProp","ClearButton","allowClearButton","dropdownOffsetDistance","dropdownAutoWidth","noMaxHeight","ariaLabelledBy","clearButtonTestId","nativeSelectTestId","defaultValue","required","getSelectInputRef","overscrollBehavior","restProps","process","env","NODE_ENV","sizeY","containerRef","useRef","handleRootRef","scrollBoxRef","selectElRef","optionsWrapperRef","selectInputRef","focusedOptionIndex","setFocusedOptionIndex","isControlledOutside","setIsControlledOutside","undefined","nativeSelectValue","setNativeSelectValue","setInputValue","popperPlacement","setPopperPlacement","setOptions","selectedOptionIndex","setSelectedOptionIndex","useEffect","some","event","Event","bubbles","current","dispatchEvent","selected","useMemo","length","openedClassNames","includes","scrollToElement","useCallback","index","center","dropdown","optionsWrapper","dropdownHeight","offsetHeight","scrollTop","itemTop","offsetTop","itemHeight","focusOptionByIndex","scrollTo","disabled","isValidIndex","setScrollBoxRef","ref","keyboardInput","setKeyboardInput","resetKeyboardInput","resetFocusedOption","onKeyboardInput","key","fullInput","close","selectOption","shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync","selectFocused","open","onBlur","onFocus","select","onClick","handleKeyUp","focusOption","type","nextIndex","beforeIndex","filterOptions","selectValue","updateSelectedOptionIndexOnValueChange","prevSelectValueRef","updateInputValueOnSelectValueChange","updatePrevSelectValue","onNativeSelectChange","newSelectedOptionIndex","currentTarget","onInputChange","target","areOptionsShown","handleKeyDownSelect","handleOptionClick","Array","prototype","indexOf","call","parentNode","prevMousePositionRef","x","y","focusOptionOnMouseMove","isMouseChangedPosition","Math","abs","clientX","clientY","popupAriaId","useId","renderOption","hovered","Fragment","label","onMouseDown","onMouseMove","id","resolvedContent","defaultDropdownContent","div","focusOnInputTimerRef","focusOnInput","clearTimeout","setTimeout","focus","clearFocusOnInputTimer","controlledValueSet","uncontrolledValueSet","clearButtonShown","clearButton","clearSelectState","data-testid","icon","afterIcons","document","passClickAndFocusToInputOnClick","clickTargetIsNotAnInput","click","inputIsNotFocused","activeElement","preventInputBlurWhenClickInsideFocusedSelectArea","isInputFocused","clickTarget","inputClicked","contains","ariaActiveDescendantOptionIndex","ariaActiveDescendantId","selectInputAriaProps","autoComplete","autoCapitalize","autoCorrect","spellCheck","onKeyUp","onKeyDown","after","selectedOptionLabel","aria-hidden","targetRef","placement","onPlacementChange","onMouseLeave","offsetDistance","autoWidth","forcePortal","role","aria-labelledby","tabIndex"],"mappings":"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"}